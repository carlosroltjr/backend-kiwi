openapi: 3.0.0
info:
  title: KIWI - API REST v1
  contact: {}
  version: '1.0'
servers:
  - url: https://app-carlos.herokuapp.com/
paths:
  /session:
    post:
      tags:
      - Session
      summary: Company authentication
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: pastel@gmail.com
              password:  '1234'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  company:
                    type: object
                    properties:
                      id: 
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
              example:
                company:
                  id: 4
                  name: pastel
                  email: pastel@gmail.com
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiaWF0IjoxNjA0Mjk0MzgwLCJleHAiOjE2MDQ4OTkxODB9.dSuh_JFr0S975PzlnJhEH6jGxZ2ubrzgBXdOfqgec_Q
        default:
          description: Error
  '/company':
    post:
      tags:
      - Company
      summary: Create Company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - name
              - email
              - password
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
            example:
              name: company
              email: company@gmail.com
              password: '1234'
      responses:
        200:
          $ref: '#/components/responses/companyResponse'
        default:
          description: Error
  '/company/{companyId}':
    get:
      tags:
      - Company
      summary: Get Company
      description: Autenticação necessária
      operationId: getCompany
      parameters:
      - $ref: '#/components/parameters/companyId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: 
                      type: integer
                    name:
                      type: string
                    email:
                      type: string
              example:
                id: 1
                name: dogao
                email: dogao@gmail.com
        default:
          description: Error
    put:
      tags:
      - Company
      summary: Update Company
      description: Autenticação necessária
      operationId: updateCompany
      parameters:
        - $ref: '#/components/parameters/companyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                oldPassword:
                  type: string
                password:
                  type: string
                  description: obrigatório caso preencha o campo `oldPassword`
                confirmPassword:
                  type: string
                  description: obrigatório caso preencha o campo `oldPassword`
            example:
              name: burrito
              email: burrito@gmail.com
              oldPassword: '1234'
              password: '6666'
              confirmPassword: '6666'
      responses:
        200:
          $ref: '#/components/responses/companyResponse'
        default:
          description: 'Error'
    delete:
      tags:
      - Company
      summary: Delete Company
      description: Autenticação necessária
      operationId: deleteCompany
      parameters:
        - $ref: '#/components/parameters/companyId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                  deletedCompany:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
              example:
                message: Company deleted
                deletedCompany:
                  id: 4
                  name: pastel
                  email: pastel@gmail.com
        default:
          description: Error
  '/queue':
    get:
      tags:
      - Queue
      summary: List Company's Queues
      operationId: listQueues
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Id da Queue
                    ingressCode:
                      type: string
                      description: Código de acesso a Queue
                    observation:
                      type: string
                    startTime:
                      type: string
                      format: date
                    endTime:
                      type: string
                      format: date
                    companyId:
                      type: integer
                      description: Id da Company a qual a Queue pertence
                    createdAt:
                      type: string
                      format: date
                    updatedAt:
                      type: string
                      format: date
              example:
                - id: 13
                  ingressCode: iLovePastel
                  observation: pastel + caldo de cana 10 reais
                  startTime: '2020-10-25T18:00:00.000Z'
                  endTime: '2020-10-25T23:00:00.000Z'
                  createdAt: '2020-11-02T23:48:00.723Z'
                  updatedAt: '2020-11-02T23:48:00.723Z'
                  companyId: 6
                - id: 14
                  ingressCode: PastelS2
                  observation: estamos sem caldo de cana hoje
                  startTime: '2020-10-24T21:00:00.000Z'
                  endTime: '2020-10-25T02:00:00.000Z'
                  createdAt: '2020-11-03T00:08:49.373Z'
                  updatedAt: '2020-11-03T00:08:49.373Z'
                  companyId: 6
        default:
          description: Error
    post:
      tags:
      - Queue
      summary: Create Queue
      operationId: createQueue
      requestBody:
        $ref: '#/components/requestBodies/createQueue'
      responses:
        200:
          $ref: '#/components/responses/queueResponse'
        default:
          description: Error
  '/queue/{queueId}':
    get:
      tags: 
      - Queue
      summary: Get Queue
      operationId: getQueue
      parameters: 
      - $ref: '#/components/parameters/queueId'
      responses:
        200:
          $ref: '#/components/responses/queueResponse'
        default:
          description: Error
    put:
      tags: 
      - Queue
      summary: Update Queue
      operationId: updateQueue
      parameters: 
      - $ref: '#/components/parameters/queueId'
      requestBody:
        $ref: '#/components/requestBodies/updateQueue'
      responses:
        200:
          $ref: '#/components/responses/queueResponse'
        default:
          description: Error
    delete:
      tags: 
      - Queue
      summary: Delete Queue
      operationId: deleteQueue
      parameters: 
      - $ref: '#/components/parameters/queueId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedQueueId:
                    type: integer
              example:
                message: Queue deleted
                deletedQueueId: 6
        default:
          description: Error
  '/queue/{queueId}/user':
    post:
      tags:
      - Queue
      summary: Handle User from Queue
      description: Atende, ou seja, exclui o User que está na primeira Position de uma Queue que pertence a uma Company
      operationId: hendleUser
      parameters: 
      - $ref: '#/components/parameters/queueId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  handledPosition:
                    type: object
                    properties:
                      id:
                        type: integer
                      first:
                        type: boolean
                        description: Se é a primeira posição
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                      queueId:
                        type: integer
                      next:
                        type: integer
                        description: O id da próxima posição
                      userId:
                        type: integer
                        description: Id do usuário que foi atendido
              example:
                message: Usuário foi chamado
                handledPosition:
                  id: 21
                  first: true
                  createdAt: '2020-11-02T04:22:51.627Z'
                  updatedAt: '2020-11-02T05:07:15.072Z'
                  queueId: 1
                  next: 22
                  userId: 4
  '/user':
    post:
      tags:
      - User
      summary: Create User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - name
              - phone
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
            example:
              name: Nadya
              phone: '994588754'
      responses:
        200:
          $ref: '#/components/responses/userResponse'
        default:
          description: Error
  '/user/{userId}':
    get:
      tags:
      - User
      summary: Get User
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/userResponse'
        default:
          description: Error
    post:
      tags:
      - User
      summary: Add User to Queue
      operationId: addUserToQueue
      parameters:
       - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - ingressCode
              type: object
              properties:
                ingressCode:
                  type: string
                  description: Código de acesso da Queue
            example:
              ingressCode: euS2burrito612
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  position:
                    type: object
                    description: Posição do User na Queue
                    properties:
                      id:
                        type: integer
                      queueId:
                        type: integer
                      userId:
                        type: integer
                      updatedAt:
                        type: string
                      createdAt:
                        type: string
                      first:
                        type: boolean
                        description: Se é a primeira posição na Queue, caso não for, o valor é `null`
                      next:
                        type: integer
                        default: null
                        description: Id da próxima posição, vai ser sempre `null` pois é a última posição
              example:
                position:
                  id: 30
                  queueId: 8
                  userId: 3
                  updatedAt: '2020-11-02T07:38:15.842Z'
                  createdAt: '2020-11-02T07:38:15.842Z'
                  first: null
                  next: null
        default:
          description: Error
    delete:
      tags:
      - User
      summary: Delete User
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Usuário deletado
        default:
          description: Error
  '/user/queue/{queueId}':
    get:
      tags:
      - User
      summary: List Queue's Users
      description: Lista a posição de todos os Users de uma Queue
      operationId: listQueueUsers
      parameters:
      - $ref: '#/components/parameters/queueId'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    position:
                      type: integer
                    id:
                      type: integer
                    first:
                      type: boolean
                    createdAt:
                      type: string
                    updatedAt:
                      type: string
                    queueId:
                      type: integer
                    next:
                      type: integer
                    userId:
                      type: integer
              example:
                - position: 1
                  id: 20
                  first: true
                  createdAt: '2020-11-02T04:21:32.598Z'
                  updatedAt: '2020-11-02T04:31:40.635Z'
                  queueId: 1
                  next: 21
                  userId: 5
                - position: 2
                  id: 21
                  first: null
                  createdAt: '2020-11-02T04:22:51.627Z'
                  updatedAt: '2020-11-02T04:22:55.265Z'
                  queueId: 1
                  next: null
                  userId: 4
        default:
          description: Error
components:
  parameters:
    companyId:
      name: companyId
      in: path
      description: Company Id
      required: true
      schema:
        type: integer
    queueId:
      name: queueId
      in: path
      description: Queue Id
      required: true
      schema:
        type: integer
    userId:
      name: userId
      in: path
      description: User Id
      required: true
      schema:
        type: integer
  requestBodies:
    createQueue:
      required: true
      content:
        application/json:
          schema:
            required:
            - companyId
            - ingressCode
            - startTime
            - endTime
            type: object
            properties:
              companyId:
                type: integer
                description: Id da Company a qual a Queue pertence
              ingressCode:
                type: string
                description: Código de acesso a Queue
              observation:
                type: string
              startTime:
                type: string
                format: date
              endTime:
                type: string
                format: date
          example:
            companyId: 1
            ingressCode: euS2burrito92
            observation: desconto no burrito de frango
            startTime: '2020-10-25T18:00:00.000Z'
            endTime: '2020-10-25T23:00:00.000Z'
    updateQueue:
      required: true
      content:
        application/json:
          schema:
            required:
            - companyId
            type: object
            properties:
              companyId:
                type: integer
                description: Id da Company a qual a Queue pertence
              ingressCode:
                type: string
                description: Código de acesso a Queue
              observation:
                type: string
              startTime:
                type: string
                format: date
              endTime:
                type: string
                format: date
          example:
            companyId: 1
            ingressCode: euS2burrito92
            observation: desconto no burrito de frango
            startTime: '2020-10-25T18:00:00.000Z'
            endTime: '2020-10-25T23:00:00.000Z'
  responses:
    companyResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              id: 
                type: integer
              name:
                type: string
              email:
                type: string
          example:
            id: 5
            name: burrito
            email: burrito@gmail.com
    queueResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Id da Queue
              companyId:
                type: integer
                description: Id da Company a qual a Queue pertence
              ingressCode:
                type: string
                description: Código de acesso a Queue
              observation:
                type: string
              startTime:
                type: string
                format: date
              endTime:
                type: string
                format: date
          example:
            id: 3
            companyId: 1
            ingressCode: euS2burrito92
            observation: desconto no burrito de frango
            startTime: '2020-10-24T21:00:00.000Z'
            endTime: '2020-10-25T02:00:00.000Z'
    userResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              phone:
                type: string
          example:
            id: 4
            name: Nadya
            phone: '994588754'
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
security:
- httpBearer: []
tags:
- name: Session
- name: Company
- name: Queue
  description: Autenticação necessária em todos os endpoints
- name: User
